--@name MM_AutoDrive
--@author 
--@sharedscreen
--@include Lib/ScrLib
--@include Lib/RTable
hook = loadLibrary "hook"
timer = loadLibrary "timer"
net = loadLibrary "net"

local function toChar(test)
    if test and 32 <= test and test <= 126 and test ~= 35 then
        return string.upper(string.char(test))
    end
    return ""
end


local function tonumberb(Bool)
    return Bool and 1 or 0    
end

local function tostringb(Bool)
    return tostring(tonumberb(Bool))
end



if SERVER then 
    R = require "Lib/RTable"
    wire = loadLibrary("wire")
    wire.adjustInputs({"Train"},{"wirelink"})
    
    local data = R{
        Initialized = false,
        Connected = false,
        RK = 1,
        ARS = 0,
        ARSN = 0,
        Speed = 0.0,
        BVol = 0.0,
        KRVol = 0.0,
        TEDAmp = 0.0,
        TEDV = 0.0,
        T1 = 0,
        T2 = 0,
        TM = 0,
        TC = 0,
        NM = 0,
        
        RP = false,
        LSN = false,
        LSD = false,
        LVD = false,
        LST = false,
        LhRK = false,
        LKT = false,
        LKVD = false,
        LKVC = false,
        RPw = false,
        VZ1 = false,
        VZ2 = false,
        AVU = false,
        PP = false,
        PT = false,
        OP = false,
    }
    
    data(function(key,old,new)
        --print("Changed "..key.." from "..tostring(old).." -> "..tostring(new))
        --print(data.BVol,data.KRVol)
        if net.canSend() then 
            net.start("MM1")
                net.writeBit(data.Connected)
                net.writeInt(data.RK,8)
                net.writeInt(data.ARS,8)
                net.writeInt(data.ARSN,8)
                net.writeFloat(data.Speed)
                net.writeFloat(data.BVol)
                net.writeFloat(data.KRVol)
                net.writeFloat(data.TEDAmp)
                net.writeFloat(data.TEDV)
                net.writeInt(data.T1,16)
                net.writeInt(data.T2,16)
                net.writeInt(data.TM,16)
                net.writeInt(data.TC,16)
                net.writeInt(data.NM,16)
        
                net.writeBit(data.RP)
                net.writeBit(data.LSN)
                net.writeBit(data.LSD)
                net.writeBit(data.LVD)
                net.writeBit(data.LST)
                net.writeBit(data.LhRK)
                net.writeBit(data.LKT)
                net.writeBit(data.LKVD)
                net.writeBit(data.LKVC)
                net.writeBit(data.RPw)
                net.writeBit(data.VZ1)
                net.writeBit(data.VZ2)
                net.writeBit(data.AVU) 
                net.writeBit(data.PP)
                net.writeBit(data.PT)
                net.writeBit(data.OP)
            net.send()
            --print(data.TM.."/"..data.TC.."/"..data.NM)
        end
    end)
    
    function getMMInputs()
        if not wire.ports.Train then data.Connected = false return else data.Connected=true end
        local MM = wire.ports.Train
        data.RK = math.round(MM[856])
        
        local CSP = MM[384]
        data.ARS = CSP>70 and 8 or 
            (CSP>60 and 7 or
            (CSP>40 and 6 or 
            (CSP>0 and 4 or
            (MM[381]~=0 and 0 or 2))))
            
        local NSP = MM[385]
        data.ARSN = NSP>70 and 8 or 
            (NSP>60 and 7 or
            (NSP>40 and 6 or 
            (NSP>0 and 4 or 2)))
            
        data.Speed = MM[376]
        data.BVol = MM[419]
        data.KRVol = MM[470]
        data.TEDAmp = MM[455]
        data.TEDV = MM[972]
        data.T1 = math.round(MM[465])
        data.T2 = math.round(MM[466])
        data.TM = math.round(MM[670]*100)
        data.TC = math.round(MM[671]*100)
        data.NM = math.round(MM[674]*100)
        
        data.RP = MM[658]>0
        data.LSN = MM[658]>0
        data.LSD = MM[11]>0
        data.LVD = MM[1]>0
        data.LST = MM[6]>0
        data.LhRK = MM[2]>0
        data.LKT = MM[21]>0
        data.LKVD = MM[373]==0
        data.LKVC = MM[614]==0
        data.RPw = MM[657]>0
        data.VZ1 = MM[680]>0
        data.VZ2 = MM[685]>0
        data.AVU = MM[661]>0
        data.PP = math.round(MM[688]) == 2
        data.PT = math.round(MM[688]) == 3
        data.OP = MM[539]>0 or MM[549]>0
    end
    
    timer.create("MMGet",0.1,0,getMMInputs)
    timer.simple(0.01,
        function()
            data.Initialized = true
            getMMInputs()
        end
    )
    
    hook.add("input","Keyboard",
        function(Name,Value)
        end
    )
        
elseif CLIENT then  
    local ScrLib = require "Lib/ScrLib"
    local clear = ScrLib.clear
    local drawLine = ScrLib.drawLine
    local drawBox = ScrLib.drawRect
    local drawTextBox = ScrLib.drawRectText
    local drawBoxOutline = ScrLib.drawRectOL
    local drawText = ScrLib.drawText
    local poly = ScrLib.poly
    local circle = ScrLib.circle
    local drawCircle = ScrLib.drawCircle
    local drawPoly = ScrLib.drawPoly
    local drawPolyOutline = ScrLib.drawPolyOL
    local drawSGCircle = ScrLib.drawSGCircle
    local drawSGChevronsBox = ScrLib.drawSGChevronsBox
    local generateChevPos = ScrLib.generateChevPos
    local drawSGChevrons = ScrLib.drawSGChevrons
    local createFont = ScrLib.createFont
    
    local ARSF = {0,2,4,6,7,8}
    
    local Tri = {-5,8,0,0,5,8}
    local Tris = {}
    for i=0,5 do
        Tris[i] = poly(15+(396/8*ARSF[i+1]),75,Tri)
    end
    
    local MM = {
        Connected = false,
        RK = 1,
        ARS = 0,
        ARSN = 0,
        Speed = 0.0,
        BVol = 0.0,
        KRVol = 0.0,
        TEDAmp = 0.0,
        TEDV = 0.0,
        T1 = 0,
        T2 = 0,
        TM = 0.0,
        TC = 0.0,
        NM = 0.0,
        
        RP = false,
        LSN = false,
        LSD = false,
        LVD = false,
        LST = false,
        LhRK = false,
        LKT = false,
        LKVD = false,
        LKVC = false,
        RPw = false,
        VZ1 = false,
        VZ2 = false,
        AVU = false,
        PP = false,
        PT = false,
        OP = false,
    }
    
    local isDraw=false
    
    local box1 = {{},{},{},{}}
    local box2 = {}
    local box3 = {{},{}}
    local White = Color(255,255,255,255)
    local Black = Color(0,0,0,255)
    local Red = Color(255,0,0,255)
        
    local Marlett = {}
    
    Marlett[20]=createFont("Marlett",20,400)
    Marlett[26]=createFont("Marlett",26,400)
    Marlett[35]=createFont("Marlett",35,400)
    
    function requreDraw()
        isDraw=false
    end
    
    function getMMNetData(Typ)
        if Typ==0 then
            MM.Connected = net.readBit()>0
            MM.RK = net.readInt(8)
            MM.ARS = net.readInt(8)
            MM.ARSN = net.readInt(8)
            MM.Speed = net.readFloat()
            MM.BVol = net.readFloat()
            MM.KRVol = net.readFloat()
            MM.TEDAmp = net.readFloat()
            MM.TEDV = net.readFloat()
            MM.T1 = net.readInt(16)
            MM.T2 = net.readInt(16)
            MM.TM = net.readInt(16)/100
            MM.TC = net.readInt(16)/100
            MM.NM = net.readInt(16)/100
        
        
            MM.RP = net.readBit()>0
            MM.LSN = net.readBit()>0
            MM.LSD = net.readBit()>0
            MM.LVD = net.readBit()>0
            MM.LST = net.readBit()>0
            MM.LhRK = net.readBit()>0
            MM.LKT = net.readBit()>0
            MM.LKVD = net.readBit()>0
            MM.LKVC = net.readBit()>0
            MM.RPw = net.readBit()>0
            MM.VZ1 = net.readBit()>0
            MM.VZ2 = net.readBit()>0
            MM.AVU = net.readBit()>0
            MM.PP = net.readBit()>0
            MM.PT = net.readBit()>0
            MM.OP = net.readBit()>0
            requreDraw()
        end
    end
     
    local ARSC = {{255,0,0},{180,75,0},{127,127,0},{20,180},{0,200},{0,255}}
    
    function MainFrame()
        clear()
        local Alpha=255
        if MM.BVol < 50 then return end
        if MM.KRVol < 600 then Alpha = 60 end
        drawText(256,17,"СИСТЕМА АВТОВЕДЕНИЯ",1,1,Color(255,255,0,Alpha),Marlett[26])
        drawLine(15,44,411,44,Color(180,180,180,Alpha),1)
        drawBox(15,34,(396/80*MM.Speed),10,Color(0,255,0,Alpha),1)
        drawBox(15+(396/80*MM.Speed),34,(396/8*MM.ARSN)-(396/80*MM.Speed),10,Color(255,100,0,Alpha),1)
        drawBox(15,44,(396/8*MM.ARS),10,Color(255,0,0,Alpha),1)
        if MM.ARS>MM.ARSN then drawBox(15,44,(396/8*MM.ARSN),10,Color(255,255,0,Alpha),1) end
        drawBoxOutline(15,34,396,20,Color(180,180,180,Alpha),1)
        for i=0,5 do
            drawText(15+(396/8*ARSF[i+1]),65,tostring(ARSF[i+1]*10),1,1,Color(ARSC[i+1][1],ARSC[i+1][2],0,Alpha),Marlett[20])
            if i==0 then continue end
            drawLine(15+(396/8*ARSF[i+1]),34,15+(396/8*ARSF[i+1]),53,Color(180,180,180,Alpha),1)
            drawPoly(Tris[i],MM.ARS == ARSF[i+1] and Color(255,0,0,Alpha) or MM.ARSN == ARSF[i+1] and Color(255,255,0,Alpha) or Color(0,0,0,0))
        end
        
        drawText(425,24,"V="..tostring(math.round(MM.Speed)),0,1,Color(100,255,100,Alpha),Marlett[26])
        drawText(425,44,"Vт="..tostring(math.round(MM.ARS*10)),0,1,Color(255,0,0,Alpha),Marlett[26])
        drawText(425,64,"Vп="..(MM.ARS <= MM.ARSN and "Vт" or tostring(math.floor(MM.ARSN*10))),0,1,Color(255,255,0,Alpha),Marlett[26])
        
        if MM.RP then drawText(15,97,"РП",0,1,Color(255,0,0,Alpha),Marlett[26]) end
        if MM.LSN then drawText(50,97,"ЛСН",0,1,Color(255,0,0,Alpha),Marlett[26]) end
        if not MM.LSD then drawText(98,97,"ЛСД",0,1,Color(0,255,0,Alpha),Marlett[26]) end
        if MM.LVD then drawText(148,97,"ЛВД",0,1,Color(0,255,0,Alpha),Marlett[26]) end
        if MM.LST then drawText(198,97,"ЛСТ",0,1,Color(0,255,0,Alpha),Marlett[26]) end
        if MM.LhRK then drawText(243,97,"ЛхРК",0,1,Color(255,150,0,Alpha),Marlett[26]) end
        if MM.LKT then drawText(304,97,"ЛКТ",0,1,Color(0,255,0,Alpha),Marlett[26]) end
        if MM.LKVD then drawText(348,97,"ЛКВД",0,1,Color(255,0,0,Alpha),Marlett[26]) end
        if MM.LKVC then drawText(413,97,"ЛКВЦ",0,1,Color(255,0,0,Alpha),Marlett[26]) end
        
        if MM.RPw then drawText(15,117,"РП",0,1,Color(100,255,100,Alpha),Marlett[26]) end
        if MM.VZ1 then drawText(50,117,"ВЗn1",0,1,Color(0,255,0,Alpha),Marlett[26]) end
        if MM.VZ2 then drawText(108,117,"ВЗn2",0,1,Color(0,255,0,Alpha),Marlett[26]) end
        if MM.AVU then drawText(166,117,"АВУ",0,1,Color(255,0,0,Alpha),Marlett[26]) end
        drawText(215,117,MM.PP and "ПП" or (MM.PT and "ПТ" or "ПС"),0,1,Color(0,255,0,Alpha),Marlett[26])
        if MM.OP then drawText(250,117,"ОП",0,1,Color(0,255,0,Alpha),Marlett[26]) end
        --12
        
        drawText(15,137,"Uб="..tostring(math.round(MM.BVol)).."В",0,1,Color(50,200,50,Alpha),Marlett[26])
        drawText(15,158,"Uо="..tostring(math.round(MM.KRVol)).."В",0,1,Color(50,200,50,Alpha),Marlett[26])
        drawText(15,179,"Iд="..tostring(math.round(math.abs(MM.TEDAmp))).."А",0,1,Color(MM.TEDAmp<800/(MM.PP and 1 or 2) and 50 or 255,MM.TEDAmp<800/(MM.PP and 1 or 2) and 200 or MM.TEDAmp<950/(MM.PP and 1 or 2) and 255 or 0,50,Alpha),Marlett[26])
        drawText(15,200,"Uд="..tostring(math.round(math.abs(MM.TEDV))).."В",0,1,Color(50,202,50,Alpha),Marlett[26])
        drawText(15,221,"Tптр13="..tostring(math.round(MM.T1)).."°C",0,1,Color(MM.T1<400 and 50 or 255,MM.T1<400 and 200 or MM.T1<600 and 255 or 0,50,Alpha),Marlett[26])
        drawText(15,243,"Tптр24="..tostring(math.round(MM.T2)).."°C",0,1,Color(MM.T2<400 and 50 or 255,MM.T2<400 and 200 or MM.T2<600 and 255 or 0,50,Alpha),Marlett[26])
        drawText(15,263,"НМ="..tostring(MM.NM).."кгс/см2",0,1,Color(MM.NM<7 and 255 or 100,MM.NM<6 and 0 or (MM.NM<7 and 255 or 100),MM.NM<7 and 0 or 100,Alpha),Marlett[26])
        drawText(15,284,"ТМ="..tostring(MM.TM).."кгс/см2",0,1,Color(255,0,0,Alpha),Marlett[26])
        drawText(15,305,"ТЦ="..tostring(MM.TC).."кгс/см2",0,1,Color(100,100,100,Alpha),Marlett[26])
        drawText(15,326,"РК:"..tostring(MM.RK),0,1,Color(255,150,0,Alpha),Marlett[26])
        --Battery.Voltage
        
        isDraw=true
    end
    
    hook.add("render","SGdraw",
        function()
            if isDraw then return end
            MainFrame()
        end
    )
    
     hook.add("net", "Recirve", 
        function(Name)
            if Name == "MM1" then
                getMMNetData(0)
            end
        end
    )
end
